// Livestock Feed Ration Game (React + Tailwind + shadcn/ui)
// This is a basic prototype. It includes farm naming, feed selection, growth simulation, and profit calculation.

import React, { useState } from 'react';
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Progress } from "@/components/ui/progress";

const feedData = [
  { name: 'Cracked Corn', cp: 9, tdn: 88, nem: 98, neg: 65, cost: 155 },
  { name: 'Grass Hay', cp: 10, tdn: 58, nem: 58, neg: 26, cost: 75 },
  { name: 'Soybean Meal', cp: 51, tdn: 80, nem: 88, neg: 59, cost: 300 },
  { name: 'Beet Pulp', cp: 9, tdn: 76, nem: 81, neg: 52, cost: 250 },
  { name: 'Whole Corn', cp: 9, tdn: 88, nem: 98, neg: 65, cost: 140 }
];

const targetRequirements = [
  { range: '400‚Äì600', cp: 15, tdn: 70, nem: 87, neg: 54 },
  { range: '600‚Äì900', cp: 13, tdn: 72, nem: 91, neg: 57 },
  { range: '900‚Äì1200', cp: 12, tdn: 74, nem: 94, neg: 60 }
];

export default function SteerRationGame() {
  const [farmName, setFarmName] = useState('');
  const [ration, setRation] = useState({});
  const [results, setResults] = useState(null);

  const handleFeedChange = (feedName, percent) => {
    setRation({ ...ration, [feedName]: parseFloat(percent) });
  };

  const simulateGrowth = () => {
    let totalPercent = 0;
    let cp = 0, tdn = 0, nem = 0, neg = 0, cost = 0;

    for (let feed of feedData) {
      const pct = ration[feed.name] || 0;
      totalPercent += pct;
      cp += feed.cp * pct / 100;
      tdn += feed.tdn * pct / 100;
      nem += feed.nem * pct / 100;
      neg += feed.neg * pct / 100;
      cost += feed.cost * pct / 100 / 2000; // cost per lb
    }

    if (Math.abs(totalPercent - 100) > 1) {
      alert("Your total ration must equal 100%.");
      return;
    }

    const calcADG = (target, actual) => {
      const delta = Math.abs(actual - target);
      if (delta <= 2) return 2.5;
      if (delta <= 5) return 2.0;
      if (delta <= 10) return 1.5;
      return 1.0;
    };

    let totalDays = 0;
    for (let phase of targetRequirements) {
      const adg = Math.min(
        calcADG(phase.cp, cp),
        calcADG(phase.tdn, tdn),
        calcADG(phase.nem, nem),
        calcADG(phase.neg, neg)
      );
      const weightGain = phase.range === '400‚Äì600' ? 200 : 300;
      totalDays += weightGain / adg;
    }

    const feedCost = totalDays * 20 * cost; // 20 lbs/day DMI
    const revenue = 1200 * 1.85;
    const profit = revenue - feedCost;

    setResults({ cp, tdn, nem, neg, cost, totalDays, feedCost, profit });
  };

  return (
    <div className="p-4 max-w-4xl mx-auto space-y-6">
      <h1 className="text-3xl font-bold text-center">üêÆ Steer Builder: Feed to Finish</h1>
      <Card>
        <CardContent className="space-y-2 p-4">
          <Label htmlFor="farmName">Farm Name</Label>
          <Input id="farmName" value={farmName} onChange={(e) => setFarmName(e.target.value)} />
        </CardContent>
      </Card>

      <Card>
        <CardContent className="p-4 space-y-2">
          <h2 className="text-xl font-semibold">Build Your Ration (Must total 100%)</h2>
          {feedData.map(feed => (
            <div key={feed.name} className="flex items-center justify-between gap-2">
              <Label className="w-40">{feed.name}</Label>
              <Input
                type="number"
                placeholder="%"
                onChange={(e) => handleFeedChange(feed.name, e.target.value)}
              />
            </div>
          ))}
        </CardContent>
      </Card>

      <Button className="w-full" onClick={simulateGrowth}>Simulate Growth</Button>

      {results && (
        <Card>
          <CardContent className="p-4 space-y-2">
            <h2 className="text-xl font-bold">üìä Results for {farmName}</h2>
            <p>Avg. CP: {results.cp.toFixed(1)}%</p>
            <p>Avg. TDN: {results.tdn.toFixed(1)}%</p>
            <p>Avg. NEm: {results.nem.toFixed(1)}</p>
            <p>Avg. NEg: {results.neg.toFixed(1)}</p>
            <p>Feed Cost / lb: ${results.cost.toFixed(3)}</p>
            <p>Days to Finish: {Math.round(results.totalDays)} days</p>
            <p>Total Feed Cost: ${results.feedCost.toFixed(2)}</p>
            <p>Final Profit: <span className="font-bold text-green-600">${results.profit.toFixed(2)}</span></p>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
